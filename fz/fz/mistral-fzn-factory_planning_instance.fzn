array [1..15] of int: can_add_attr = [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0];
array [1..25] of int: connected = [1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1];
array [1..6] of int: prod_attr_goal = [1, 1, 0, 1, 0, 1];
array [1..2] of int: prod_start_mach = [1, 1];
var bool: BOOL____65 :: is_defined_var :: var_is_introduced;
var bool: BOOL____66 :: is_defined_var :: var_is_introduced;
var bool: BOOL____67 :: is_defined_var :: var_is_introduced;
var bool: BOOL____68 :: is_defined_var :: var_is_introduced;
var bool: BOOL____69 :: is_defined_var :: var_is_introduced;
var bool: BOOL____70 :: is_defined_var :: var_is_introduced;
var bool: BOOL____71 :: is_defined_var :: var_is_introduced;
var bool: BOOL____72 :: is_defined_var :: var_is_introduced;
var bool: BOOL____73 :: is_defined_var :: var_is_introduced;
var bool: BOOL____74 :: is_defined_var :: var_is_introduced;
var bool: BOOL____75 :: is_defined_var :: var_is_introduced;
var bool: BOOL____76 :: is_defined_var :: var_is_introduced;
var bool: BOOL____77 :: is_defined_var :: var_is_introduced;
var bool: BOOL____78 :: is_defined_var :: var_is_introduced;
var bool: BOOL____79 :: is_defined_var :: var_is_introduced;
var bool: BOOL____80 :: is_defined_var :: var_is_introduced;
var bool: BOOL____81 :: is_defined_var :: var_is_introduced;
var bool: BOOL____82 :: is_defined_var :: var_is_introduced;
var bool: BOOL____83 :: is_defined_var :: var_is_introduced;
var bool: BOOL____84 :: is_defined_var :: var_is_introduced;
var bool: BOOL____85 :: is_defined_var :: var_is_introduced;
var bool: BOOL____86 :: is_defined_var :: var_is_introduced;
var bool: BOOL____87 :: is_defined_var :: var_is_introduced;
var bool: BOOL____88 :: is_defined_var :: var_is_introduced;
var bool: BOOL____89 :: is_defined_var :: var_is_introduced;
var bool: BOOL____90 :: is_defined_var :: var_is_introduced;
var bool: BOOL____91 :: is_defined_var :: var_is_introduced;
var bool: BOOL____92 :: is_defined_var :: var_is_introduced;
var bool: BOOL____93 :: is_defined_var :: var_is_introduced;
var bool: BOOL____94 :: is_defined_var :: var_is_introduced;
var 1..13: INT____1 :: is_defined_var :: var_is_introduced;
var 0..1: INT____10 :: is_defined_var :: var_is_introduced;
var 3..15: INT____11 :: is_defined_var :: var_is_introduced;
var 0..1: INT____12 :: is_defined_var :: var_is_introduced;
var 1..13: INT____13 :: is_defined_var :: var_is_introduced;
var 0..1: INT____14 :: is_defined_var :: var_is_introduced;
var 2..14: INT____15 :: is_defined_var :: var_is_introduced;
var 0..1: INT____16 :: is_defined_var :: var_is_introduced;
var 3..15: INT____17 :: is_defined_var :: var_is_introduced;
var 0..1: INT____18 :: is_defined_var :: var_is_introduced;
var 1..13: INT____19 :: is_defined_var :: var_is_introduced;
var 0..1: INT____2 :: is_defined_var :: var_is_introduced;
var 0..1: INT____20 :: is_defined_var :: var_is_introduced;
var 2..14: INT____21 :: is_defined_var :: var_is_introduced;
var 0..1: INT____22 :: is_defined_var :: var_is_introduced;
var 3..15: INT____23 :: is_defined_var :: var_is_introduced;
var 0..1: INT____24 :: is_defined_var :: var_is_introduced;
var 1..13: INT____25 :: is_defined_var :: var_is_introduced;
var 0..1: INT____26 :: is_defined_var :: var_is_introduced;
var 2..14: INT____27 :: is_defined_var :: var_is_introduced;
var 0..1: INT____28 :: is_defined_var :: var_is_introduced;
var 3..15: INT____29 :: is_defined_var :: var_is_introduced;
var 2..14: INT____3 :: is_defined_var :: var_is_introduced;
var 0..1: INT____30 :: is_defined_var :: var_is_introduced;
var 1..13: INT____31 :: is_defined_var :: var_is_introduced;
var 0..1: INT____32 :: is_defined_var :: var_is_introduced;
var 2..14: INT____33 :: is_defined_var :: var_is_introduced;
var 0..1: INT____34 :: is_defined_var :: var_is_introduced;
var 3..15: INT____35 :: is_defined_var :: var_is_introduced;
var 0..1: INT____36 :: is_defined_var :: var_is_introduced;
var 1..13: INT____37 :: is_defined_var :: var_is_introduced;
var 0..1: INT____38 :: is_defined_var :: var_is_introduced;
var 2..14: INT____39 :: is_defined_var :: var_is_introduced;
var 0..1: INT____4 :: is_defined_var :: var_is_introduced;
var 0..1: INT____40 :: is_defined_var :: var_is_introduced;
var 3..15: INT____41 :: is_defined_var :: var_is_introduced;
var 0..1: INT____42 :: is_defined_var :: var_is_introduced;
var 1..13: INT____43 :: is_defined_var :: var_is_introduced;
var 0..1: INT____44 :: is_defined_var :: var_is_introduced;
var 2..14: INT____45 :: is_defined_var :: var_is_introduced;
var 0..1: INT____46 :: is_defined_var :: var_is_introduced;
var 3..15: INT____47 :: is_defined_var :: var_is_introduced;
var 0..1: INT____48 :: is_defined_var :: var_is_introduced;
var 1..25: INT____49 :: is_defined_var :: var_is_introduced;
var 3..15: INT____5 :: is_defined_var :: var_is_introduced;
var 1..25: INT____51 :: is_defined_var :: var_is_introduced;
var 1..25: INT____53 :: is_defined_var :: var_is_introduced;
var 1..25: INT____55 :: is_defined_var :: var_is_introduced;
var 1..25: INT____57 :: is_defined_var :: var_is_introduced;
var 1..25: INT____59 :: is_defined_var :: var_is_introduced;
var 0..1: INT____6 :: is_defined_var :: var_is_introduced;
var 1..25: INT____61 :: is_defined_var :: var_is_introduced;
var 1..25: INT____63 :: is_defined_var :: var_is_introduced;
var 1..13: INT____7 :: is_defined_var :: var_is_introduced;
var 0..1: INT____8 :: is_defined_var :: var_is_introduced;
var 2..14: INT____9 :: is_defined_var :: var_is_introduced;
var 5..5: last_step = 5;
array [1..30] of var 0..1: step_prod_attr :: output_array([1..5, 1..2, 1..3]);
array [1..10] of var 1..5: step_prod_mach :: output_array([1..5, 1..2]);
constraint array_int_element(INT____49, connected, 1);
constraint array_int_element(INT____51, connected, 1);
constraint array_int_element(INT____53, connected, 1);
constraint array_int_element(INT____55, connected, 1);
constraint array_int_element(INT____57, connected, 1);
constraint array_int_element(INT____59, connected, 1);
constraint array_int_element(INT____61, connected, 1);
constraint array_int_element(INT____63, connected, 1);
constraint array_int_element(INT____9, can_add_attr, INT____10) :: defines_var(INT____10);
constraint array_int_element(INT____11, can_add_attr, INT____12) :: defines_var(INT____12);
constraint array_int_element(INT____13, can_add_attr, INT____14) :: defines_var(INT____14);
constraint array_int_element(INT____15, can_add_attr, INT____16) :: defines_var(INT____16);
constraint array_int_element(INT____17, can_add_attr, INT____18) :: defines_var(INT____18);
constraint array_int_element(INT____1, can_add_attr, INT____2) :: defines_var(INT____2);
constraint array_int_element(INT____19, can_add_attr, INT____20) :: defines_var(INT____20);
constraint array_int_element(INT____21, can_add_attr, INT____22) :: defines_var(INT____22);
constraint array_int_element(INT____23, can_add_attr, INT____24) :: defines_var(INT____24);
constraint array_int_element(INT____25, can_add_attr, INT____26) :: defines_var(INT____26);
constraint array_int_element(INT____27, can_add_attr, INT____28) :: defines_var(INT____28);
constraint array_int_element(INT____29, can_add_attr, INT____30) :: defines_var(INT____30);
constraint array_int_element(INT____31, can_add_attr, INT____32) :: defines_var(INT____32);
constraint array_int_element(INT____33, can_add_attr, INT____34) :: defines_var(INT____34);
constraint array_int_element(INT____35, can_add_attr, INT____36) :: defines_var(INT____36);
constraint array_int_element(INT____37, can_add_attr, INT____38) :: defines_var(INT____38);
constraint array_int_element(INT____3, can_add_attr, INT____4) :: defines_var(INT____4);
constraint array_int_element(INT____39, can_add_attr, INT____40) :: defines_var(INT____40);
constraint array_int_element(INT____41, can_add_attr, INT____42) :: defines_var(INT____42);
constraint array_int_element(INT____43, can_add_attr, INT____44) :: defines_var(INT____44);
constraint array_int_element(INT____45, can_add_attr, INT____46) :: defines_var(INT____46);
constraint array_int_element(INT____47, can_add_attr, INT____48) :: defines_var(INT____48);
constraint array_int_element(INT____5, can_add_attr, INT____6) :: defines_var(INT____6);
constraint array_int_element(INT____7, can_add_attr, INT____8) :: defines_var(INT____8);
constraint bool_le(BOOL____65, BOOL____66);
constraint bool_le(BOOL____67, BOOL____68);
constraint bool_le(BOOL____69, BOOL____70);
constraint bool_le(BOOL____71, BOOL____72);
constraint bool_le(BOOL____73, BOOL____74);
constraint bool_le(BOOL____75, BOOL____76);
constraint bool_le(BOOL____77, BOOL____78);
constraint bool_le(BOOL____79, BOOL____80);
constraint bool_le(BOOL____81, BOOL____82);
constraint bool_le(BOOL____83, BOOL____84);
constraint bool_le(BOOL____85, BOOL____86);
constraint bool_le(BOOL____87, BOOL____88);
constraint bool_le(BOOL____89, BOOL____90);
constraint bool_le(BOOL____91, BOOL____92);
constraint bool_le(BOOL____93, BOOL____94);
constraint int_eq(step_prod_attr[1], 0);
constraint int_eq(step_prod_attr[2], 0);
constraint int_eq(step_prod_attr[3], 0);
constraint int_eq(step_prod_attr[4], 0);
constraint int_eq(step_prod_attr[5], 0);
constraint int_eq(step_prod_attr[6], 0);
constraint int_eq(step_prod_attr[25], 1);
constraint int_eq(step_prod_attr[26], 1);
constraint int_eq(step_prod_attr[27], 0);
constraint int_eq(step_prod_attr[28], 1);
constraint int_eq(step_prod_attr[29], 0);
constraint int_eq(step_prod_attr[30], 1);
constraint int_eq(step_prod_mach[1], 1);
constraint int_eq(step_prod_mach[2], 1);
constraint int_eq(step_prod_mach[9], 5);
constraint int_eq(step_prod_mach[10], 5);
constraint int_eq_reif(step_prod_mach[1], 2, BOOL____65) :: defines_var(BOOL____65);
constraint int_eq_reif(step_prod_mach[1], 3, BOOL____67) :: defines_var(BOOL____67);
constraint int_eq_reif(step_prod_mach[1], 4, BOOL____69) :: defines_var(BOOL____69);
constraint int_eq_reif(step_prod_mach[3], 2, BOOL____71) :: defines_var(BOOL____71);
constraint int_eq_reif(step_prod_mach[3], 3, BOOL____73) :: defines_var(BOOL____73);
constraint int_eq_reif(step_prod_mach[3], 4, BOOL____75) :: defines_var(BOOL____75);
constraint int_eq_reif(step_prod_mach[5], 2, BOOL____77) :: defines_var(BOOL____77);
constraint int_eq_reif(step_prod_mach[5], 3, BOOL____79) :: defines_var(BOOL____79);
constraint int_eq_reif(step_prod_mach[5], 4, BOOL____81) :: defines_var(BOOL____81);
constraint int_eq_reif(step_prod_mach[7], 2, BOOL____83) :: defines_var(BOOL____83);
constraint int_eq_reif(step_prod_mach[7], 3, BOOL____85) :: defines_var(BOOL____85);
constraint int_eq_reif(step_prod_mach[7], 4, BOOL____87) :: defines_var(BOOL____87);
constraint int_eq_reif(step_prod_mach[9], 2, BOOL____89) :: defines_var(BOOL____89);
constraint int_eq_reif(step_prod_mach[9], 3, BOOL____91) :: defines_var(BOOL____91);
constraint int_eq_reif(step_prod_mach[9], 4, BOOL____93) :: defines_var(BOOL____93);
constraint int_le(step_prod_attr[1], step_prod_attr[7]);
constraint int_le(step_prod_attr[2], step_prod_attr[8]);
constraint int_le(step_prod_attr[3], step_prod_attr[9]);
constraint int_le(step_prod_attr[4], step_prod_attr[10]);
constraint int_le(step_prod_attr[5], step_prod_attr[11]);
constraint int_le(step_prod_attr[6], step_prod_attr[12]);
constraint int_le(step_prod_attr[7], step_prod_attr[13]);
constraint int_le(step_prod_attr[8], step_prod_attr[14]);
constraint int_le(step_prod_attr[9], step_prod_attr[15]);
constraint int_le(step_prod_attr[10], step_prod_attr[16]);
constraint int_le(step_prod_attr[11], step_prod_attr[17]);
constraint int_le(step_prod_attr[12], step_prod_attr[18]);
constraint int_le(step_prod_attr[13], step_prod_attr[19]);
constraint int_le(step_prod_attr[14], step_prod_attr[20]);
constraint int_le(step_prod_attr[15], step_prod_attr[21]);
constraint int_le(step_prod_attr[16], step_prod_attr[22]);
constraint int_le(step_prod_attr[17], step_prod_attr[23]);
constraint int_le(step_prod_attr[18], step_prod_attr[24]);
constraint int_le(step_prod_attr[19], step_prod_attr[25]);
constraint int_le(step_prod_attr[20], step_prod_attr[26]);
constraint int_le(step_prod_attr[21], step_prod_attr[27]);
constraint int_le(step_prod_attr[22], step_prod_attr[28]);
constraint int_le(step_prod_attr[23], step_prod_attr[29]);
constraint int_le(step_prod_attr[24], step_prod_attr[30]);
constraint int_lin_eq([-1, 3], [INT____1, step_prod_mach[1]], 2) :: defines_var(INT____1) :: domain;
constraint int_lin_eq([-1, 3], [INT____11, step_prod_mach[2]], 0) :: defines_var(INT____11) :: domain;
constraint int_lin_eq([-1, 3], [INT____13, step_prod_mach[3]], 2) :: defines_var(INT____13) :: domain;
constraint int_lin_eq([-1, 3], [INT____15, step_prod_mach[3]], 1) :: defines_var(INT____15) :: domain;
constraint int_lin_eq([-1, 3], [INT____17, step_prod_mach[3]], 0) :: defines_var(INT____17) :: domain;
constraint int_lin_eq([-1, 3], [INT____19, step_prod_mach[4]], 2) :: defines_var(INT____19) :: domain;
constraint int_lin_eq([-1, 3], [INT____21, step_prod_mach[4]], 1) :: defines_var(INT____21) :: domain;
constraint int_lin_eq([-1, 3], [INT____23, step_prod_mach[4]], 0) :: defines_var(INT____23) :: domain;
constraint int_lin_eq([-1, 3], [INT____25, step_prod_mach[5]], 2) :: defines_var(INT____25) :: domain;
constraint int_lin_eq([-1, 3], [INT____27, step_prod_mach[5]], 1) :: defines_var(INT____27) :: domain;
constraint int_lin_eq([-1, 3], [INT____29, step_prod_mach[5]], 0) :: defines_var(INT____29) :: domain;
constraint int_lin_eq([-1, 3], [INT____3, step_prod_mach[1]], 1) :: defines_var(INT____3) :: domain;
constraint int_lin_eq([-1, 3], [INT____31, step_prod_mach[6]], 2) :: defines_var(INT____31) :: domain;
constraint int_lin_eq([-1, 3], [INT____33, step_prod_mach[6]], 1) :: defines_var(INT____33) :: domain;
constraint int_lin_eq([-1, 3], [INT____35, step_prod_mach[6]], 0) :: defines_var(INT____35) :: domain;
constraint int_lin_eq([-1, 3], [INT____37, step_prod_mach[7]], 2) :: defines_var(INT____37) :: domain;
constraint int_lin_eq([-1, 3], [INT____39, step_prod_mach[7]], 1) :: defines_var(INT____39) :: domain;
constraint int_lin_eq([-1, 3], [INT____41, step_prod_mach[7]], 0) :: defines_var(INT____41) :: domain;
constraint int_lin_eq([-1, 3], [INT____43, step_prod_mach[8]], 2) :: defines_var(INT____43) :: domain;
constraint int_lin_eq([-1, 3], [INT____45, step_prod_mach[8]], 1) :: defines_var(INT____45) :: domain;
constraint int_lin_eq([-1, 3], [INT____47, step_prod_mach[8]], 0) :: defines_var(INT____47) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____49, step_prod_mach[1], step_prod_mach[3]], 5) :: defines_var(INT____49) :: domain;
constraint int_lin_eq([-1, 3], [INT____5, step_prod_mach[1]], 0) :: defines_var(INT____5) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____51, step_prod_mach[2], step_prod_mach[4]], 5) :: defines_var(INT____51) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____53, step_prod_mach[3], step_prod_mach[5]], 5) :: defines_var(INT____53) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____55, step_prod_mach[4], step_prod_mach[6]], 5) :: defines_var(INT____55) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____57, step_prod_mach[5], step_prod_mach[7]], 5) :: defines_var(INT____57) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____59, step_prod_mach[6], step_prod_mach[8]], 5) :: defines_var(INT____59) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____61, step_prod_mach[7], step_prod_mach[9]], 5) :: defines_var(INT____61) :: domain;
constraint int_lin_eq([-1, 5, 1], [INT____63, step_prod_mach[8], step_prod_mach[10]], 5) :: defines_var(INT____63) :: domain;
constraint int_lin_eq([-1, 3], [INT____7, step_prod_mach[2]], 2) :: defines_var(INT____7) :: domain;
constraint int_lin_eq([-1, 3], [INT____9, step_prod_mach[2]], 1) :: defines_var(INT____9) :: domain;
constraint int_lin_le([-1, -1, 1], [INT____10, step_prod_attr[5], step_prod_attr[11]], 0);
constraint int_lin_le([-1, -1, 1], [INT____12, step_prod_attr[6], step_prod_attr[12]], 0);
constraint int_lin_le([-1, -1, 1], [INT____14, step_prod_attr[7], step_prod_attr[13]], 0);
constraint int_lin_le([-1, -1, 1], [INT____16, step_prod_attr[8], step_prod_attr[14]], 0);
constraint int_lin_le([-1, -1, 1], [INT____18, step_prod_attr[9], step_prod_attr[15]], 0);
constraint int_lin_le([-1, -1, 1], [INT____2, step_prod_attr[1], step_prod_attr[7]], 0);
constraint int_lin_le([-1, -1, 1], [INT____20, step_prod_attr[10], step_prod_attr[16]], 0);
constraint int_lin_le([-1, -1, 1], [INT____22, step_prod_attr[11], step_prod_attr[17]], 0);
constraint int_lin_le([-1, -1, 1], [INT____24, step_prod_attr[12], step_prod_attr[18]], 0);
constraint int_lin_le([-1, -1, 1], [INT____26, step_prod_attr[13], step_prod_attr[19]], 0);
constraint int_lin_le([-1, -1, 1], [INT____28, step_prod_attr[14], step_prod_attr[20]], 0);
constraint int_lin_le([-1, -1, 1], [INT____30, step_prod_attr[15], step_prod_attr[21]], 0);
constraint int_lin_le([-1, -1, 1], [INT____32, step_prod_attr[16], step_prod_attr[22]], 0);
constraint int_lin_le([-1, -1, 1], [INT____34, step_prod_attr[17], step_prod_attr[23]], 0);
constraint int_lin_le([-1, -1, 1], [INT____36, step_prod_attr[18], step_prod_attr[24]], 0);
constraint int_lin_le([-1, -1, 1], [INT____38, step_prod_attr[19], step_prod_attr[25]], 0);
constraint int_lin_le([-1, -1, 1], [INT____4, step_prod_attr[2], step_prod_attr[8]], 0);
constraint int_lin_le([-1, -1, 1], [INT____40, step_prod_attr[20], step_prod_attr[26]], 0);
constraint int_lin_le([-1, -1, 1], [INT____42, step_prod_attr[21], step_prod_attr[27]], 0);
constraint int_lin_le([-1, -1, 1], [INT____44, step_prod_attr[22], step_prod_attr[28]], 0);
constraint int_lin_le([-1, -1, 1], [INT____46, step_prod_attr[23], step_prod_attr[29]], 0);
constraint int_lin_le([-1, -1, 1], [INT____48, step_prod_attr[24], step_prod_attr[30]], 0);
constraint int_lin_le([-1, -1, 1], [INT____6, step_prod_attr[3], step_prod_attr[9]], 0);
constraint int_lin_le([-1, -1, 1], [INT____8, step_prod_attr[4], step_prod_attr[10]], 0);
constraint int_ne_reif(step_prod_mach[2], 2, BOOL____66) :: defines_var(BOOL____66);
constraint int_ne_reif(step_prod_mach[2], 3, BOOL____68) :: defines_var(BOOL____68);
constraint int_ne_reif(step_prod_mach[2], 4, BOOL____70) :: defines_var(BOOL____70);
constraint int_ne_reif(step_prod_mach[4], 2, BOOL____72) :: defines_var(BOOL____72);
constraint int_ne_reif(step_prod_mach[4], 3, BOOL____74) :: defines_var(BOOL____74);
constraint int_ne_reif(step_prod_mach[4], 4, BOOL____76) :: defines_var(BOOL____76);
constraint int_ne_reif(step_prod_mach[6], 2, BOOL____78) :: defines_var(BOOL____78);
constraint int_ne_reif(step_prod_mach[6], 3, BOOL____80) :: defines_var(BOOL____80);
constraint int_ne_reif(step_prod_mach[6], 4, BOOL____82) :: defines_var(BOOL____82);
constraint int_ne_reif(step_prod_mach[8], 2, BOOL____84) :: defines_var(BOOL____84);
constraint int_ne_reif(step_prod_mach[8], 3, BOOL____86) :: defines_var(BOOL____86);
constraint int_ne_reif(step_prod_mach[8], 4, BOOL____88) :: defines_var(BOOL____88);
constraint int_ne_reif(step_prod_mach[10], 2, BOOL____90) :: defines_var(BOOL____90);
constraint int_ne_reif(step_prod_mach[10], 3, BOOL____92) :: defines_var(BOOL____92);
constraint int_ne_reif(step_prod_mach[10], 4, BOOL____94) :: defines_var(BOOL____94);
solve satisfy;
