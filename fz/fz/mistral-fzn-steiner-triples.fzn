var 0..1: INT____10 :: is_defined_var :: var_is_introduced;
var 0..1: INT____12 :: is_defined_var :: var_is_introduced;
var 0..1: INT____14 :: is_defined_var :: var_is_introduced;
var 0..1: INT____16 :: is_defined_var :: var_is_introduced;
var 0..1: INT____18 :: is_defined_var :: var_is_introduced;
var 0..1: INT____2 :: is_defined_var :: var_is_introduced;
var 0..1: INT____20 :: is_defined_var :: var_is_introduced;
var 0..1: INT____22 :: is_defined_var :: var_is_introduced;
var 0..1: INT____24 :: is_defined_var :: var_is_introduced;
var 0..1: INT____26 :: is_defined_var :: var_is_introduced;
var 0..1: INT____28 :: is_defined_var :: var_is_introduced;
var 0..1: INT____30 :: is_defined_var :: var_is_introduced;
var 0..1: INT____32 :: is_defined_var :: var_is_introduced;
var 0..1: INT____34 :: is_defined_var :: var_is_introduced;
var 0..1: INT____36 :: is_defined_var :: var_is_introduced;
var 0..1: INT____38 :: is_defined_var :: var_is_introduced;
var 0..1: INT____4 :: is_defined_var :: var_is_introduced;
var 0..1: INT____40 :: is_defined_var :: var_is_introduced;
var 0..1: INT____42 :: is_defined_var :: var_is_introduced;
var 0..1: INT____6 :: is_defined_var :: var_is_introduced;
var 0..1: INT____8 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____1 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____11 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____13 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____15 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____17 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____19 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____21 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____23 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____25 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____27 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____29 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____3 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____31 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____33 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____35 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____37 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____39 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____41 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____5 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____7 :: is_defined_var :: var_is_introduced;
var set of 1..7: SET____9 :: is_defined_var :: var_is_introduced;
array [1..7] of var set of 1..7: sets :: output_array([1..7]);
constraint set_card(sets[1], 3);
constraint set_card(sets[2], 3);
constraint set_card(sets[3], 3);
constraint set_card(sets[4], 3);
constraint set_card(sets[5], 3);
constraint set_card(sets[6], 3);
constraint set_card(sets[7], 3);
constraint set_card(SET____9, INT____10) :: defines_var(INT____10);
constraint set_card(SET____11, INT____12) :: defines_var(INT____12);
constraint set_card(SET____13, INT____14) :: defines_var(INT____14);
constraint set_card(SET____15, INT____16) :: defines_var(INT____16);
constraint set_card(SET____17, INT____18) :: defines_var(INT____18);
constraint set_card(SET____1, INT____2) :: defines_var(INT____2);
constraint set_card(SET____19, INT____20) :: defines_var(INT____20);
constraint set_card(SET____21, INT____22) :: defines_var(INT____22);
constraint set_card(SET____23, INT____24) :: defines_var(INT____24);
constraint set_card(SET____25, INT____26) :: defines_var(INT____26);
constraint set_card(SET____27, INT____28) :: defines_var(INT____28);
constraint set_card(SET____29, INT____30) :: defines_var(INT____30);
constraint set_card(SET____31, INT____32) :: defines_var(INT____32);
constraint set_card(SET____33, INT____34) :: defines_var(INT____34);
constraint set_card(SET____35, INT____36) :: defines_var(INT____36);
constraint set_card(SET____37, INT____38) :: defines_var(INT____38);
constraint set_card(SET____3, INT____4) :: defines_var(INT____4);
constraint set_card(SET____39, INT____40) :: defines_var(INT____40);
constraint set_card(SET____41, INT____42) :: defines_var(INT____42);
constraint set_card(SET____5, INT____6) :: defines_var(INT____6);
constraint set_card(SET____7, INT____8) :: defines_var(INT____8);
constraint set_intersect(sets[1], sets[2], SET____1) :: defines_var(SET____1);
constraint set_intersect(sets[1], sets[7], SET____11) :: defines_var(SET____11);
constraint set_intersect(sets[2], sets[3], SET____13) :: defines_var(SET____13);
constraint set_intersect(sets[2], sets[4], SET____15) :: defines_var(SET____15);
constraint set_intersect(sets[2], sets[5], SET____17) :: defines_var(SET____17);
constraint set_intersect(sets[2], sets[6], SET____19) :: defines_var(SET____19);
constraint set_intersect(sets[2], sets[7], SET____21) :: defines_var(SET____21);
constraint set_intersect(sets[3], sets[4], SET____23) :: defines_var(SET____23);
constraint set_intersect(sets[3], sets[5], SET____25) :: defines_var(SET____25);
constraint set_intersect(sets[3], sets[6], SET____27) :: defines_var(SET____27);
constraint set_intersect(sets[3], sets[7], SET____29) :: defines_var(SET____29);
constraint set_intersect(sets[1], sets[3], SET____3) :: defines_var(SET____3);
constraint set_intersect(sets[4], sets[5], SET____31) :: defines_var(SET____31);
constraint set_intersect(sets[4], sets[6], SET____33) :: defines_var(SET____33);
constraint set_intersect(sets[4], sets[7], SET____35) :: defines_var(SET____35);
constraint set_intersect(sets[5], sets[6], SET____37) :: defines_var(SET____37);
constraint set_intersect(sets[5], sets[7], SET____39) :: defines_var(SET____39);
constraint set_intersect(sets[6], sets[7], SET____41) :: defines_var(SET____41);
constraint set_intersect(sets[1], sets[4], SET____5) :: defines_var(SET____5);
constraint set_intersect(sets[1], sets[5], SET____7) :: defines_var(SET____7);
constraint set_intersect(sets[1], sets[6], SET____9) :: defines_var(SET____9);
constraint set_le(sets[2], sets[1]);
constraint set_le(sets[3], sets[2]);
constraint set_le(sets[4], sets[3]);
constraint set_le(sets[5], sets[4]);
constraint set_le(sets[6], sets[5]);
constraint set_le(sets[7], sets[6]);
solve  :: set_search(sets, input_order, indomain_min, complete) satisfy;
